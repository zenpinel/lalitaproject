n = int(input("number of word :"))
m = int(input("grid size :"))

import random
import string

from pprint import pprint

#import vocab file
handle = open('commonword.txt','r')
words = handle.readlines()
handle.close()

words = [random.choice(words).upper().replace("'",'').strip() for _ in range(n)]

grid_size = m
grid = [['_' for _ in range(grid_size)] for _ in range(grid_size)]

#visualize grid
def print_grid():
    for i in range(grid_size):
        print ('\t'*5 + ' '.join( grid[i] ))

orientations = ['leftright','updown','diagnolup','diagnoldown']

#check word lenght
for word in words:
    word_lenght = len(word)

    placed = False
    while not placed:

        #word position
        orientation = random.choice(orientations)
        if orientation == 'leftright':
            step_x = 1
            step_y = 0
        if orientation == 'updown':
            step_x = 0
            step_y = 1
        if orientation == 'diagnoldown':
            step_x = 1
            step_y = 1
        if orientation == 'diagnolup':
            step_x = 1
            step_y = -1
        x_position = random.randint(0,grid_size)
        y_position = random.randint(0,grid_size)

        ending_x = x_position + word_lenght*step_x
        ending_y = y_position + word_lenght*step_y

        if ending_x < 0 or ending_x >= grid_size:
            continue
        if ending_y < 0 or ending_y >= grid_size:
            continue

        failed = False

        #check if the word can place in grid
        for i in range(word_lenght):
            character = word[i]

            new_position_x = x_position + i*step_x
            new_position_y = y_position + i*step_y

            character_at_new_position = grid[new_position_x][new_position_y]
            if character_at_new_position != '_':
                if character_at_new_position == character:
                    continue
                else:
                    failed = True
                    break
        if failed:
            continue
        else:
            for i in range(word_lenght):
                character = word[i]
                new_position_x = x_position + i*step_x
                new_position_y = y_position + i*step_y

                grid[new_position_x][new_position_y] = character
            placed = True

#fill in the grid

uppercase_letters = string.ascii_uppercase

for x in range(grid_size):
    for y in range(grid_size):
        if ( grid[x][y] == '_'):
            grid[x][y] = random.choice(uppercase_letters)

print_grid()
print ("words:")
pprint(words)